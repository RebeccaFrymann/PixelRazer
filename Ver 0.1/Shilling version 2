from user301_dZJL5znAdk_0 import Vector
from user301_35na3iAwqQ_0 import RegularPolygon
from user303_OHTLTXLRlz_5 import Particle
import simplegui

########
# Side (RIGHT) view of character #
RIGHT_WIDTH = 1000 / 4
RIGHT_HEIGHT = 500 / 2
RIGHT_CENTER = [RIGHT_WIDTH/2, RIGHT_HEIGHT/2]
RIGHT_SIZE = [RIGHT_WIDTH, RIGHT_HEIGHT]
RIGHT_DIM = [4, 2]
right_image = simplegui.load_image("https://i.imgur.com/caAvbvK.png")

# Side(LEFT) view of character#
LEFT_WIDTH = 1000/4
LEFT_HEIGHT = 500/2
LEFT_CENTER = [LEFT_WIDTH/2, LEFT_HEIGHT/2]
LEFT_SIZE = [LEFT_WIDTH, LEFT_HEIGHT]
LEFT_DIM = [4,2]
left_image = simplegui.load_image("https://i.imgur.com/WgnPT6V.png")

# Back view of character #
BACK_WIDTH = 1000/4
BACK_HEIGHT = 500/2
BACK_CENTER = [BACK_WIDTH/2, BACK_HEIGHT/2]
BACK_SIZE = [BACK_WIDTH, BACK_HEIGHT]
BACK_DIM = [4,2]
back_image = simplegui.load_image("https://i.imgur.com/nQW0p1G.png")

# Front view of character#
FRONT_WIDTH = 1000/4
FRONT_HEIGHT = 500/2
FRONT_CENTER = [FRONT_WIDTH/2, FRONT_HEIGHT/2]
FRONT_SIZE = [FRONT_WIDTH, FRONT_HEIGHT]
FRONT_DIM = [4,2]
front_image = simplegui.load_image("https://i.imgur.com/haAhGWE.png")
## Character attck ##
ATTACK_WIDTH = 1000/4
ATTACK_HEIGHT = 500/2
ATTACK_CENTER = [ATTACK_WIDTH/2, ATTACK_HEIGHT/2]
ATTACK_SIZE = [ATTACK_WIDTH, ATTACK_WIDTH]
ATTACK_DIM = [4,2]
attack_image = simplegui.load_image("https://i.imgur.com/1HBjEey.png")

#Wisp
WISP_WIDTH = 1000 / 4
WISP_HEIGHT = 500 / 2
WISP_CENTER = [WISP_WIDTH/2, WISP_HEIGHT/2]
WISP_SIZE = [WISP_WIDTH, WISP_HEIGHT]
WISP_DIM = [4, 2]
wisp_image = simplegui.load_image("https://i.imgur.com/tz5HfML.png")
#Wisp 2
WISP2_WIDTH = 400 / 4
WISP2_HEIGHT = 200 / 2
WISP2_CENTER = [WISP2_WIDTH/2, WISP2_HEIGHT/2]
WISP2_SIZE = [WISP2_WIDTH, WISP2_HEIGHT]
WISP2_DIM = [4, 2]
wisp2_image = simplegui.load_image("https://i.imgur.com/Hv0QHvY.png")

#wisp shoot
gun = RegularPolygon(2, Vector(490, 600), 10)
gun1 = RegularPolygon(2, Vector(90,563), 10)

# Background image (Shilling ground floor) #
WIDTH = 768
HEIGHT = 768
image_center = (384, 384)
image_size = (750, 750)
pos = [384, 384]
image = simplegui.load_image("https://i.imgur.com/bFyXh2P.png")

#Shilling first floor#
WIDTHf = 768
HEIGHTf = 768
image_centerf = (384, 384)
image_sizef = (750, 750)
posf = [384, 384]
imagef = simplegui.load_image("https://i.imgur.com/QJXOd6P.png")


#########
##global variables##
End = False
Playing = False
global score 
kill = 0
lives = 0
playerKill = False
global timerR

def timer_handler(): 
    global counter
    counter = (counter + 1) % (RIGHT_DIM[0] * RIGHT_DIM[1])

timerR = simplegui.create_timer(100, timer_handler)

class Character:
    def __init__(self, pos):
        self.pos = pos
        self.vel = Vector()
        self.right = False
        self.up = False
        self.down = False
        self.left = False
        self.space = False
    def keyDown(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = True
            timerR.start()
        if key == simplegui.KEY_MAP['left']:
            self.left = True
            timerR.start()
        if key == simplegui.KEY_MAP['up']:
            self.up = True
            timerR.start()
        if key == simplegui.KEY_MAP['down']:
            self.down = True
            timerR.start()
        if key == simplegui.KEY_MAP['space']:
            self.space = True
            timerR.start()
            
    def keyUp(self, key):
        if key == simplegui.KEY_MAP['right']:
            self.right = False
            timerR.stop()
        if key == simplegui.KEY_MAP['left']:
            self.left = False
            timerR.stop()
        if key == simplegui.KEY_MAP['up']:
            self.up = False
            timerR.stop()
        if key == simplegui.KEY_MAP['down']:
            self.down = False
            timerR.stop()
        if key == simplegui.KEY_MAP['space']:
            self.space = False
            timerR.stop()
            
    def move(self):
        if self.right:
            self.vel.add(Vector(1,0))
        if self.left:
            self.vel.add(Vector(-1,0))
        if self.up:
            self.vel.add(Vector(0,-1))
        if self.down:
            self.vel.add(Vector(0,1))

    def attack(self, canvas):
        attack_index = [counter % ATTACK_DIM[0], counter // ATTACK_DIM[0]]
        canvas.draw_image(attack_image,
                          [ATTACK_CENTER[0] + attack_index[0] * ATTACK_SIZE[0],
                           ATTACK_CENTER[1] + attack_index[1] * ATTACK_SIZE[1]],
                           ATTACK_SIZE, self.pos.getP(), ATTACK_SIZE)
        
    def walkRight(self, canvas):
        right_index = [counter% RIGHT_DIM[0], counter // RIGHT_DIM[0]]
        canvas.draw_image(right_image, 
                          [RIGHT_CENTER[0] + right_index[0] * RIGHT_SIZE[0], 
                           RIGHT_CENTER[1] + right_index[1] * RIGHT_SIZE[1]], 
                           RIGHT_SIZE, self.pos.getP(), RIGHT_SIZE)
    def walkFront(self, canvas):
        front_index = [counter % FRONT_DIM[0], counter // FRONT_DIM[0]]
        canvas.draw_image(front_image, 
                         [FRONT_CENTER[0] + front_index[0] * FRONT_SIZE[0], 
                          FRONT_CENTER[1] + front_index[1] * FRONT_SIZE[1]], 
                          FRONT_SIZE, self.pos.getP(), FRONT_SIZE)
    def walkBack(self, canvas):
        back_index = [counter % BACK_DIM[0], counter // BACK_DIM[0]]
        canvas.draw_image(back_image, 
                         [BACK_CENTER[0] + back_index[0] * BACK_SIZE[0], 
                          BACK_CENTER[1] + back_index[1] * BACK_SIZE[1]], 
                          BACK_SIZE, self.pos.getP(), BACK_SIZE)
        
    def walkLeft(self, canvas):
        left_index = [counter % LEFT_DIM[0], counter // LEFT_DIM[0]]
        canvas.draw_image(left_image,
                         [LEFT_CENTER[0] + left_index[0] * LEFT_SIZE[0],
                          LEFT_CENTER[1] + left_index[1] * LEFT_SIZE[1]],
                          LEFT_SIZE, self.pos.getP(), LEFT_SIZE)
    def draw(self, canvas):
        if ((not self.down) and (not self.up) and (not self.right) and (not self.left) and (not self.space)):
            front_index = [counter % FRONT_DIM[0], counter // FRONT_DIM[0]]
            canvas.draw_image(front_image, 
                             [FRONT_CENTER[0] + front_index[0] * FRONT_SIZE[0], 
                              FRONT_CENTER[1] + front_index[1] * FRONT_SIZE[1]], 
                              FRONT_SIZE, self.pos.getP(), FRONT_SIZE)
        if (self.up):
            self.walkBack(canvas)
            
        if (self.down):
            self.walkFront(canvas)
            
        if self.right and not self.down and not self.up:
            self.walkRight(canvas)
        
        if self.left and not self.down and not self.up:
            self.walkLeft(canvas)
        
        if self.space:
            self.attack(canvas)
            
    def update(self):
        self.pos.add(self.vel)
        self.vel.multiply(0.15)
            
class Monster:
    def _init_(self):
        self.pos = pos
        
    def draw(self, canvas):
        wisp_index = [counter % WISP_DIM[0], counter // WISP_DIM[0]]
        canvas.draw_image(wisp_image, 
                        [WISP_CENTER[0] + wisp_index[0] * WISP_SIZE[0], 
                        WISP_CENTER[1] + wisp_index[1] * WISP_SIZE[1]], 
                        WISP_SIZE, (90, 563), WISP_SIZE)
        wisp2_index = [counter % WISP2_DIM[0], counter // WISP2_DIM[0]]
        canvas.draw_image(wisp2_image, 
                        [WISP2_CENTER[0] + wisp2_index[0] * WISP2_SIZE[0], 
                        WISP2_CENTER[1] + wisp2_index[1] * WISP2_SIZE[1]], 
                        WISP2_SIZE, (490,600), WISP2_SIZE)
c = Character(Vector(130,80))
W1 = Monster()

def draw(canvas):
    canvas.draw_image(image, image_center, image_size, pos, image_size)
    c.move()
    c.update()
    c.draw(canvas)
    W1.draw(canvas)
    
frame = simplegui.create_frame('GAME', WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(c.keyDown)
frame.set_keyup_handler(c.keyUp)
counter = 0

frame.start()
